# -*- coding: utf-8 -*-
"""
Created on Fri Feb 14 20:35:05 2025

@author: Conal
"""
import numpy as np
import matplotlib.pyplot as plt

class KalmanFilter:
    def __init__(self, dt, std_acc, std_omega, std_pos, std_vel):
        self.dt = dt  # Time step
        
        # State vector: [x, y, v, theta]
        self.x = np.zeros((4, 1))
        
        # State transition model (non-linear, will be applied manually)
        self.F = np.eye(4)
        
        # Process noise covariance matrix
        self.Q = np.diag([std_acc**2, std_acc**2, std_omega**2, std_omega**2])
        
        # Measurement matrix (assume we can measure x and y)
        self.H = np.array([[1, 0, 0, 0],
                           [0, 1, 0, 0]])
        
        # Measurement noise covariance matrix
        self.R = np.diag([std_pos**2, std_pos**2])
        
        # State covariance matrix
        self.P = np.eye(4) * 10  # High initial uncertainty
    
    def predict(self):
        v = self.x[2, 0]
        theta = self.x[3, 0]
        
        # Update state using CTRV motion model
        self.x[0, 0] += v * np.cos(theta) * self.dt
        self.x[1, 0] += v * np.sin(theta) * self.dt
        self.x[3, 0] += self.dt  # Constant angular velocity
        
        # Linearized transition matrix
        self.F = np.array([[1, 0, np.cos(theta) * self.dt, -v * np.sin(theta) * self.dt],
                           [0, 1, np.sin(theta) * self.dt,  v * np.cos(theta) * self.dt],
                           [0, 0, 1, 0],
                           [0, 0, 0, 1]])
        
        # Predict state covariance
        self.P = self.F @ self.P @ self.F.T + self.Q
    
    def update(self, z):
        y = z - (self.H @ self.x)  # Innovation
        S = self.H @ self.P @ self.H.T + self.R  # Innovation covariance
        K = self.P @ self.H.T @ np.linalg.inv(S)  # Kalman gain
        self.x = self.x + (K @ y)  # Update state
        self.P = (np.eye(4) - K @ self.H) @ self.P  # Update covariance

# Simulate circular motion with multiple beacons
dt = 0.1  # Time step
kf = KalmanFilter(dt, std_acc=0.1, std_omega=0.1, std_pos=1.5, std_vel=0.5)
kf.x = np.array([[10], [0], [1], [0]])  # Initial state (x, y, v, theta)

# Define four beacon positions (outside the track)
beacons = [(15, 0), (-15, 0), (0, 15), (0, -15)]

# Generate measurements
num_steps = 100
true_positions = []
measurements = []
for i in range(num_steps):
    true_x = 10 * np.cos(i * dt)
    true_y = 10 * np.sin(i * dt)
    true_positions.append((true_x, true_y))
    
    # Compute noisy distance measurements from multiple beacons
    beacon_measurements = []
    for beacon_x, beacon_y in beacons:
        distance = np.sqrt((true_x - beacon_x)**2 + (true_y - beacon_y)**2)
        measured_distance = distance + np.random.normal(0, 1.5)
        angle = np.arctan2(true_y - beacon_y, true_x - beacon_x)
        z_x = beacon_x + measured_distance * np.cos(angle)
        z_y = beacon_y + measured_distance * np.sin(angle)
        beacon_measurements.append((z_x, z_y))
    
    # Use the average of all beacon measurements
    z_x_avg = np.mean([m[0] for m in beacon_measurements])
    z_y_avg = np.mean([m[1] for m in beacon_measurements])
    z = np.array([[z_x_avg], [z_y_avg]])
    measurements.append(z)
    
    # Kalman filter update
    kf.predict()
    kf.update(z)
    
    # Plot results
    plt.scatter(true_x, true_y, color='blue', s=10)  # True position
    plt.scatter(kf.x[0, 0], kf.x[1, 0], color='red', s=10)  # Estimated position
    for beacon_x, beacon_y in beacons:
        plt.scatter(beacon_x, beacon_y, color='green', marker='x', s=100)  # Beacon positions

plt.xlabel("X Position")
plt.ylabel("Y Position")
plt.title("Kalman Filter - Circular Motion Tracking with Multiple Beacons")
plt.legend(["True Position", "Estimated Position", "Beacons"])
plt.axis("equal")
plt.show()
